
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { db } from '../firebase';
import {
  collection,
  query,
  where,
  onSnapshot,
  addDoc,
  updateDoc,
  deleteDoc,
  doc,
  serverTimestamp,
  Timestamp,
} from 'firebase/firestore';
import { useAuth } from '../auth/AuthContext';
import { Transaction } from '../types';

// Omit id because it's generated by Firestore
type NewTransaction = Omit<Transaction, 'id'>;

interface TransactionsContextData {
  transactions: Transaction[];
  addTransaction: (transaction: Omit<NewTransaction, 'userId' | 'createdAt'>) => Promise<void>;
  updateTransaction: (id: string, updates: Partial<Omit<NewTransaction, 'userId' | 'createdAt'> | { date: string }>) => Promise<void>;
  deleteTransaction: (id: string) => Promise<void>;
  loading: boolean;
}

const TransactionsContext = createContext<TransactionsContextData>({} as TransactionsContextData);

export const useTransactions = () => {
  return useContext(TransactionsContext);
};

export const TransactionsProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [loading, setLoading] = useState(true);
  const { user } = useAuth(); // Get the current user from AuthContext

  useEffect(() => {
    if (!user) {
      setTransactions([]);
      setLoading(false);
      return;
    }

    setLoading(true);
    const q = query(collection(db, 'transactions'), where('userId', '==', user.uid));

    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const transactionsData: Transaction[] = [];
      querySnapshot.forEach((doc) => {
        const data = doc.data();
        transactionsData.push({
          id: doc.id,
          description: data.description,
          amount: data.amount,
          category: data.category,
          type: data.type,
          date: data.date,
          createdAt: data.createdAt,
          userId: data.userId,
        });
      });
      transactionsData.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
      setTransactions(transactionsData);
      setLoading(false);
    }, (error) => {
        console.error("Error fetching transactions: ", error);
        setLoading(false);
    });

    return () => unsubscribe();
  }, [user]);

  const addTransaction = async (transaction: Omit<NewTransaction, 'userId' | 'createdAt'>) => {
    if (!user) throw new Error("No user is signed in to add a transaction.");
    
    await addDoc(collection(db, 'transactions'), {
      ...transaction,
      userId: user.uid,
      createdAt: serverTimestamp(),
    });
  };

  const updateTransaction = async (id: string, updates: Partial<Omit<NewTransaction, 'userId' | 'createdAt'> | { date: string }>) => {
     if (!user) throw new Error("No user is signed in to update a transaction.");
    const transactionDocRef = doc(db, 'transactions', id);
    await updateDoc(transactionDocRef, updates);
  };

  const deleteTransaction = async (id: string) => {
    if (!user) throw new Error("No user is signed in to delete a transaction.");
    const transactionDocRef = doc(db, 'transactions', id);
    await deleteDoc(transactionDocRef);
  };


  return (
    <TransactionsContext.Provider value={{ transactions, loading, addTransaction, updateTransaction, deleteTransaction }}>
      {children}
    </TransactionsContext.Provider>
  );
};
